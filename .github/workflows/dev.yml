name: CI/CD Pipeline - Dev

on:
  push:
    branches:
      - dev

env:
  AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
  AWS_REGION: "us-east-1"
  APP_NAME: "mavf-app"
  CLUSTER_NAME: "mavf-ecs-cluster"
  REPOSITORY_NAME: "mavf/$APP_NAME"

jobs:
  ci-app:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Setup Nodejs
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install Dependencies
      run: npm install
      working-directory: ./app

    - name: Lint App
      run: npm run lint
      working-directory: ./app

    - name: Test App
      run: npm run test
      working-directory: ./app

  ci-terraform:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Terraform get vars
      run: |
        chmod +x ./scripts/get_tf_vars.sh
        ./scripts/get_tf_vars.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        S3_TF_BACKEND_URI: ${{ secrets.S3_TF_BACKEND_URI }}
        S3_TF_TERRAFORM_URI: ${{ secrets.S3_TF_TERRAFORM_URI }}

    - name: Terraform fmt check
      run: terraform fmt --recursive --check
      working-directory: ./terraform

    - name: Terraform Init
      run: terraform init -backend-config=environment/${GITHUB_REF_NAME}/backend.tfvars
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

  build-publish:
    runs-on: ubuntu-latest
    needs:
      - ci-app
      - ci-terraform
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Login to Amazon ECR Private
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

    - name: Build Image
      run: docker build -t app .
      working-directory: ./app

    - name: Create ECR repository if not exists
      run: |
        set +e
        REPO_EXISTS=$(aws ecr describe-repositories --repository-names ${{ env.REPOSITORY_NAME }} 2>&1)
        if [[ $REPO_EXISTS == *"RepositoryNotFoundException"* ]]; then
          echo "Repository ${{ env.REPOSITORY_NAME }} not found. Creating..."
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
        else
          echo "Repository ${{ env.REPOSITORY_NAME }} already exists."
        fi
        set -e
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Tag Image
      run: docker tag app:latest ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      working-directory: ./app

    - name: Publish Image
      run: docker push ${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      working-directory: ./app

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-publish
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.12.2"

    - name: Terraform get vars
      run: |
        chmod +x ./scripts/get_tf_vars.sh
        ./scripts/get_tf_vars.sh
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        S3_TF_BACKEND_URI: ${{ secrets.S3_TF_BACKEND_URI }}
        S3_TF_TERRAFORM_URI: ${{ secrets.S3_TF_TERRAFORM_URI }}

    - name: Terraform Init
      run: terraform init -backend-config=environment/${GITHUB_REF_NAME}/backend.tfvars
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

    - name: Terraform Plan
      run: terraform plan -var-file=environment/${GITHUB_REF_NAME}/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

    - name: Terraform Apply
      run: terraform apply --auto-approve -var-file=environment/${GITHUB_REF_NAME}/terraform.tfvars -var container_image=${{ env.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY_NAME }}:${GITHUB_SHA::8}
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}

  wait-ecs-deploy:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
    - name: checkout repository
      uses: actions/checkout@v4

    - name: ECS Wait Deployment Complete
      run: aws ecs wait services-stable --cluster ${{ env.CLUSTER_NAME }} --services  ${{ env.APP_NAME }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ env.AWS_REGION }}